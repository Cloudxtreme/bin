#!/bin/sh

if pidof -x dropboxd > /dev/null ; then
	echo
else
	dropboxd &
	sleep 10s
fi

IMAGEPATH=Dropbox/Public/$(date +%m%d%S).png && scrot $IMAGEPATH && dropbox puburl $IMAGEPATH | xclip
notify-send "Screenshot Done" "URL copied to clipboard $IMAGEPATH"

# # API Key provided by Alan@imgur.com
# . /media/truecrypt1/private/imgur_api
# apikey=$imgur_api
# imgurlog=~/.imgur.log
# sleep 2s

# IMAGEPATH=/tmp/$(date +%m%d%S)-${USER}.png && scrot $IMAGEPATH

# # check API key has been entered
# if [ "$apikey" = "Your API key" ]; then
# 	echo "You first need to edit the script and put your API key in the variable near the top." > $imgurlog
# 	exit 1
# fi


# # check curl is available
# type curl >/dev/null 2>/dev/null || {
# 	echo "Couln't find curl, which is required." > $imgurlog
# 	exit 1
# }

# clip=""
# errors=false
# file="$IMAGEPATH"

# if [ ! -f $imgurlog ]; then
# 	touch $imgurlog
# fi
# Targets (1): gh-20121208-1
# Total Installed Size:   0.02 MiB
# Net Upgrade Size:       0.00 MiB

# # check file exists
# if [ ! -f "$file" ]; then
# 	echo "file '$file' doesn't exist, skipping" > $imgurlog
# 	errors=true
# 	continue
# fi

# # upload the image
# response=$(curl -F "key=$apikey" -H "Expect: " -F "image=@$file" \
# 	http://imgur.com/api/upload.xml 2>/dev/null)

# # the "Expect: " header is to get around a problem when using this through 
# # the Squid proxy. Not sure if it's a Squid bug or what.
# if [ $? -ne 0 ]; then
# 	echo "Upload failed" >> $imgurlog
# 	errors=true
# elif [ $(echo $response | grep -c "<error_msg>") -gt 0 ]; then
# 	echo "Error message from imgur:" > $imgurlog
# 	echo $response | sed -r 's/.*<error_msg>(.*)<\/error_msg>.*/\1/' >> $imgurlog
# 	errors=true
# fi

# # parse the response and output our stuff
# url=$(echo $response | sed -r 's/.*<original_image>(.*)<\/original_image>.*/\1/')
# deleteurl=$(echo $response | sed -r 's/.*<delete_page>(.*)<\/delete_page>.*/\1/')
# echo $url
# echo "Delete page: $deleteurl" >> $imgurlog

# # append the URL to a string so we can put them all on the clipboard later
# clip="$clip$url
# "

# # put the URLs on the clipboard if we have xsel or xclip
# if [ $DISPLAY ]; then
# 	echo -n $clip | xclip
# else
# 	echo "Haven't copied to the clipboard: no \$DISPLAY" >> $imgurlog
# fi

# if $errors; then
# 	notify-send "foobar!"
# 	exit 1
# else
# 	notify-send "Screenshot Done" "URL copied to clipboard $url"
# fi