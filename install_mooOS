#!/bin/bash
# Install mooOS


## root script
if [ $(id -u) -eq 0 ]; then

	installer_icon='preferences-system-symbolic'
	THIS_DIR="$(cd -P "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

	## temporary files
    _TEMP=/tmp/answer$$
    mkdir -p /tmp/tmp 2>/dev/null
    TMP=/tmp/tmp 2>/dev/null

	reset_default() {
		installer_menu
	}

	installer_menu() {
		# Display menu and interact based on the user's input
		action=$(yad --image=$installer_icon --width 300 --title="mooOS Installer" --text="Configure Installation" --form --field="Administrator:CB" --field="Username" --field="Hostname" --field="Password:H" --field="Re-Type Password:H" --field="Shell:FL" --field="Default Browser:FL" --field="Install codecs:CHK" --field="Minimal Install (no X):CHK" --field="LAMP Server:CHK" --field="Configure Packages:CHK" 'Yes, sudo rights!Yes, sudo NOPASSWD!None' "moo" "mooOS-Desktop" "" "" "/usr/bin/zsh"  "/usr/bin/firefox" TRUE FALSE FALSE TRUE --button="Revert to Default:2" --button="Next:0" --button="gtk-cancel:1")

		ret=$?

		if [[ $ret -eq 1 ]]; then
			exit 0
		fi

		if [[ $ret -eq 2 ]]; then
		    reset_default
		fi

		new_admin_rights=$(echo $action | awk 'BEGIN {FS="|" } { print $1 }')
	    new_username=$(echo $action | awk 'BEGIN {FS="|" } { print $2 }')
	    new_hostname=$(echo $action | awk 'BEGIN {FS="|" } { print $3 }')
	    new_password=$(echo $action | awk 'BEGIN {FS="|" } { print $4 }')
	  	new_password_again=$(echo $action | awk 'BEGIN {FS="|" } { print $5 }')
	  	new_shell=$(echo $action | awk 'BEGIN {FS="|" } { print $6 }')
	  	new_browser=$(echo $action | awk 'BEGIN {FS="|" } { print $7 }')
	  	new_codecs=$(echo $action | awk 'BEGIN {FS="|" } { print $8 }')
	  	new_minimal=$(echo $action | awk 'BEGIN {FS="|" } { print $9 }')
	  	new_lamp_server=$(echo $action | awk 'BEGIN {FS="|" } { print $10 }')
	  	new_configure=$(echo $action | awk 'BEGIN {FS="|" } { print $11 }')

		if [ "$new_password" != "$new_password_again" ] || [ "$new_password" = "" ]; then
			yad --width 300 --title "Password" --image=$installer_icon --button="gtk-ok:0" --text "Passwords mismatch"
			installer_menu
			exit 0
		fi

		if [ "$new_shell" != "/usr/bin/zsh" ] && [ "/usr/bin/bash" != "" ]; then
			yad --width 300 --title "Shell" --image=$installer_icon --button="gtk-ok:0" --text "Shell does not appear valid, defaulting to zsh"
			new_shell="/usr/bin/zsh"
		fi


		if [ "$new_browser" != "/usr/bin/firefox" ] && [ "/usr/bin/vb" != "" ] && [ "/usr/bin/vbp" != "" ] && [ "/usr/bin/vimb" != "" ]; then
			yad --width 300 --title "Web Browser" --image=$installer_icon --button="gtk-ok:0" --text "Web browser does not appear valid, defaulting to firefox"
			new_browser="/usr/bin/firefox"
		fi

		if [ $new_codecs = TRUE ]; then
			echo "$(cat /root/packages.codecs)" >> /root/packages.both
		fi

		if [ $new_minimal = TRUE ]; then
			echo wee
		fi

		if [ $new_lamp_server = TRUE ]; then
			echo "$(cat /root/packages.lamp)" >> /root/packages.both
		fi

		if [ $new_configure = TRUE ]; then
			echo wee
		fi

		echo $new_admin_rights
	    echo $new_username
	    echo $new_hostname
	    echo $new_password
	  	echo $new_password_again
	  	echo $new_shell
	  	echo $new_browser
	  	echo $new_codecs
	  	echo $new_minimal
	  	echo $new_lamp_server
	  	echo $new_configure

	  	return 0
	}

	#while true
	#do
		installer_menu
	#done


	exit 0


 ## functions
    exiting_installer() {
        clear
        rm -f $_TEMP
        dialog --clear --backtitle "$upper_title" --title "Exiting Script" --msgbox "type: rs.sh to re-run" 10 40
        exit 0
    }

    installer_menu() {
        dialog \
            --colors --backtitle "$upper_title" --title "$upper_title" \
            --menu "Select action: (Do them in order)" 20 60 10 \
            1 $clr"List linux partitions" \
            2 $clr"Partition editor (cfdisk)" \
            3 $clr"Format and/or mount filesystems" \
            4 $clr"Create internet connection" \
            5 $clr"Initial install" \
            6 $clr"Generate fstab" \
            7 $clr"Configure" \
            8 $clr"Unmount install partitions" \
            9 $clr"Finish and reboot. (Remove livecd after poweroff)" \
            10 $clr"Exit" 2>$_TEMP

        if [ $? = 1 ] || [ $? = 255 ] ; then
            exiting
            return 0
        fi

        choice=$(cat $_TEMP)
        case $choice in
            1) list_partitions;;
            2) partition_editor;;
            3) make_filesystems;;
            4) make_internet;;
            5) initial_install;;
            6) generate_fstab;;
            7) chroot_configuration;;
            8) cleanup;;
            9) finishup;;
            10) exiting_installer;;
        esac
    }

    list_partitions() {
        #partition_list=`blkid | grep -i 'TYPE="ext[234]"' | cut -d ' ' -f 1 | grep -i '^/dev/' | grep -v '/dev/loop' | grep -v '/dev/mapper' | sed "s/://g"`
        fdisk -l | grep Linux | cut -b 1-9 > $TMP/pout 2>/dev/null
        partition_list=$(cat $TMP/pout)
        if [ "$partition_list" = "" ] ; then
            partition_list="It appears you have no linux partitions yet."
        fi

        dialog --clear --backtitle "$upper_title" --title "Partitions" --msgbox "$partition_list \n\n Hit enter to return to menu" 15 40
    }

    partition_editor() {
        dialog --clear --backtitle "$upper_title" --title "Partition editor" --cancel-label "Cancel" --msgbox "pdq is not responsible for loss of data or anything else. When in doubt, cancel and read the code.\n\nIf you accept this, you can start cfdisk now!\n\nYou can return to the main menu at any time by hitting <ESC> key." 20 70
        if [ $? = 255 ] ; then
            installer_menu
            return 0            
        fi

        dialog --clear --backtitle "$upper_title" --title "Partition editor" --yesno "Create a / (primary, bootable* and recommended minimum 6GB in size) and a /home (primary and remaining size) partition.\n\n* Optionally create a /swap (primary and recommended twice the size of your onboard RAM) and /boot (primary, bootable and recommended minimum 1GB in size) partition.\n\nJust follow the menu, store your changes and quit cfdisk to go on!\n\nIMPORTANT: Read the instructions and the output of cfdisk carefully.\n\nProceed?" 20 70
        if [ $? = 0 ] ; then
            umount /mnt/* 2>/dev/null
            cfdisk
        fi
    }

    make_filesystems() {
        fdisk -l | grep Linux | sed -e '/swap/d' | cut -b 1-9 > $TMP/pout 2>/dev/null

        dialog --clear --backtitle "$upper_title" --title "ROOT PARTITION DETECTED" --exit-label OK --msgbox "Installer has detected\n\n `cat /tmp/tmp/pout` \n\n as your linux partition(s).\n\nIn the next box you can choose the linux filesystem for your root partition or choose the partition if you have more linux partitions!" 20 70
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi

        # choose root partition
        dialog --clear --backtitle "$upper_title" --title "CHOOSE ROOT PARTITION" --inputbox "Please choose your preferred root partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 1 for /dev/hda1!" 10 70 2> $TMP/pout
        if [ $? = 1 ] || [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi

        pout=$(cat $TMP/pout)

        dialog --clear --backtitle "$upper_title" --title "ROOT  PARTITION" --yesno "Create the filesystem? [Select No to skip to mounting]" 20 70
        if [ $? = 0 ] ; then
            dialog --clear --backtitle "$upper_title" --title "FORMAT ROOT PARTITION" --radiolist "Now you can choose the filesystem for your root partition.\n\next4 is the recommended filesystem." 20 70 30 \
            "1" "ext2" off \
            "2" "ext3" off \
            "3" "ext4" on \
            2> $TMP/part
            if [ $? = 1 ] || [ $? = 255 ] ; then
                installer_menu
                return 0 
            fi

            part=$(cat $TMP/part)
            fs_type=

            if [ "$part" == "2" ] ; then
                fs_type="ext3"
            elif [ "$part" == "3" ] ; then
                fs_type="ext4"
            else
                fs_type="ext2"
            fi

            mkfs -t $fs_type $pout
            typefs=" as $fs_type"
        fi

        mount $pout /mnt

        dialog --clear --backtitle "$upper_title" --title "ROOT PARTITION MOUNTED" --msgbox "Your $pout partition has been mounted at /mnt$typefs" 10 70
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi

        # choose home partition
        dialog --clear --backtitle "$upper_title" --title "CHOOSE HOME PARTITION" --inputbox "Please choose your preferred home partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 2 for /dev/hda2!" 10 70 2> $TMP/plout
        if [ $? = 1 ] || [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
        
        plout=$(cat $TMP/plout)

        dialog --clear --backtitle "$upper_title" --title "HOME  PARTITION" --yesno "Create the filesystem? [Select No to skip to mounting]" 20 70
        if [ $? = 0 ] ; then
            dialog --clear --backtitle "$upper_title" --title "FORMAT HOME PARTITION" --radiolist "Now you can choose the filesystem for your home partition.\n\next4 is the recommended filesystem." 20 70 30 \
            "1" "ext2" off \
            "2" "ext3" off \
            "3" "ext4" on \
            2> $TMP/plart
            if [ $? = 1 ] || [ $? = 255 ] ; then
                installer_menu
                return 0 
            fi

            plart=$(cat $TMP/plart)
            fs_type=

            if [ "$plart" == "2" ] ; then
                fs_type="ext3"
            elif [ "$plart" == "3" ] ; then
                fs_type="ext4"
            else
                fs_type="ext2"
            fi

            mkdir -vp /mnt/home
            mkfs -t $fs_type $plout
            typefs=" as $fs_type"
        fi

        mount $plout /mnt/home

        dialog --clear --backtitle "$upper_title" --title "HOME PARTITION MOUNTED" --msgbox "Your $plout partition has been mounted at /mnt/home$typefs" 10 70
    

        dialog --clear --backtitle "$upper_title" --title "BOOT  PARTITION" --defaultno --yesno "Create the boot filesystem?" 20 70
        if [ $? = 0 ] ; then
            # choose boot partition
            dialog --clear --backtitle "$upper_title" --title "CHOOSE BOOT PARTITION" --inputbox "Please choose your preferred boot partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 3 for /dev/hda3!" 10 70 2> $TMP/pbout
            if [ $? = 1 ] || [ $? = 255 ] ; then
                installer_menu
                return 0 
            fi
            
            pbout=$(cat $TMP/pbout)

            dialog --clear --backtitle "$upper_title" --title "BOOT PARTITION" --yesno "Create the filesystem? [Select No to skip to mounting]" 20 70
            if [ $? = 0 ] ; then
                dialog --clear --backtitle "$upper_title" --title "FORMAT BOOT PARTITION" --radiolist "Now you can choose the filesystem for your boot partition.\n\next4 is the recommended filesystem." 20 70 30 \
                "1" "ext2" off \
                "2" "ext3" off \
                "3" "ext4" on \
                2> $TMP/pbart
                if [ $? = 1 ] || [ $? = 255 ] ; then
                    installer_menu
                    return 0 
                fi

                pbart=$(cat $TMP/pbart)
                fs_type=

                if [ "$pbart" == "2" ] ; then
                fs_type="ext3"
                elif [ "$pbart" == "3" ] ; then
                fs_type="ext4"
                else
                fs_type="ext2"
                fi

                mkdir -vp /mnt/boot
                mkfs -t $fs_type $pbout
                typefs=" as $fs_type"
            fi
            mount $pbout /mnt/boot

            dialog --clear --backtitle "$upper_title" --title "BOOT PARTITION MOUNTED" --msgbox "Your $pbout partition has been mounted at /mnt/boot$typefs" 10 70
        fi

        dialog --clear --backtitle "$upper_title" --title "SWAP PARTITION" --defaultno --yesno "Create the swap filesystem?" 10 70
        if [ $? = 0 ] ; then
            # choose home partition
            dialog --clear --backtitle "$upper_title" --title "CHOOSE SWAP PARTITION" --inputbox "Please choose your preferred swap partition in this way:\n\n/dev/hdaX --- X = number of the partition, e. g. 4 for /dev/hda4!" 10 70 2> $TMP/psout
            psout=$(cat $TMP/psout)
            mkswap $psout
            swapon $psout
            dialog --clear --backtitle "$upper_title" --title "SWAP SETUP" --msgbox "Ran: mkswap $psout and swapon $psout" 10 70
        fi
    }

    make_internet() {
        dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "Test/configure internet connection" 10 70
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi

        dialog --clear --backtitle "$upper_title" --title "Internet" --yesno "Configure wired connection?" 10 70
        if [ $? = 0 ] ; then
            local net_list mynet
            for mynet in $(ip link show | awk '/: / {print $2}' | tr -d :) ; do
                net_list+="${mynet} - "
            done

            my_networks=$(dialog --stdout --backtitle "$upper_title" --title 'Internet' --cancel-label "Go Back" \
            --default-item "${my_networks}" --menu "Choose network or <Go Back> to return" 16 45 23 ${net_list} "Exit" "-" || echo "${my_networks}")

            if [ "$my_networks" = "" ] || [ $? = 255 ] || [ "$my_networks" = "Exit" ] ; then
                installer_menu
                return 0
            fi

            if [ "$my_networks" ] ; then # some better check should be here / placeholder
                #dhcpcd $my_networks
                if [ -f /usr/bin/netctl ]; then
                    mkdir create_network && cd create_network
                    wget http://www.opennicproject.org/nearest-servers/
                    dns_ip1=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' index.html | sort -r | head -1)
                    dns_ip2=$(grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' index.html | sort -rg | head -1)
                    cp /etc/netctl/examples/ethernet-static /etc/netctl/ethernetstatic
                    sed -i "s/eth0/$my_networks/g" /etc/netctl/ethernetstatic
                    echo "DNS=('$dns_ip1' '$dns_ip2')" >> /etc/netctl/ethernetstatic
                    netctl start ethernetstatic
                    netctl enable ethernetstatic
                    cd .. && rm -r create_network
                else
                    dhcpcd $my_networks
                fi

                dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "Set network to $my_networks using netctl (enabled/started)" 10 30
            else
                dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "Failed to set network...network does not exist/null?" 10 30
            fi

            # wget -q --tries=10 --timeout=5 http://www.google.com -O /tmp/index.google &> /dev/null

            # if [ ! -s /tmp/index.google ] ; then
            #     dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "It appears you have no internet connection, refer to for instructions on loading your required wireless kernel modules.\n\nhttps://wiki.archlinux.org/index.php/Wireless_Setup" 10 40
            # else
            #     dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "It appears you have an internet connection, huzzah for small miracles. :p" 10 30
            # fi
        else
            dialog --clear --backtitle "$upper_title" --title "Internet" --radiolist "Choose your preferred wireless setup tool" 10 70 30 \
            "1" "wifi-menu" on \
            "2" "wpa_supplicant" off \
            2> $TMP/pwifi
            if [ $? = 1 ] || [ $? = 255 ] ; then
                installer_menu
                return 0 
            fi

            local net_list mynet
            for mynet in $(ip link show | awk '/: / {print $2}' | tr -d :) ; do
                net_list+="${mynet} - "
            done

            my_networks=$(dialog --stdout --backtitle "$upper_title" --title 'Internet' --cancel-label "Go Back" \
            --default-item "${my_networks}" --menu "Choose network or <Go Back> to return" 16 45 23 ${net_list} "Exit" "-" || echo "${my_networks}")

            if [ "$my_networks" = "" ] || [ $? = 255 ] || [ "$my_networks" = "Exit" ] ; then
                installer_menu
                return 0
            fi

            if [ "$my_networks" ] ; then # some better check should be here / placeholder
                dhcpcd $my_networks
                dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "Set network to $my_networks" 10 30
            else
                dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "Failed to set network...network does not exist/null?" 10 30
            fi

            pwifi=$(cat $TMP/pwifi)
            if [ "$pwifi" == "1" ] ; then
                if [ -f /usr/bin/netctl ]; then
                    wifi-menu $my_networks
                else
                    dhcpcd $my_networks
                fi
            else
                dialog --clear --backtitle "$upper_title" --title "Internet" --inputbox "Please enter your SSID" 10 70 2> $TMP/pssid
                pssid=$(cat $TMP/pssid)

                dialog --clear --backtitle "$upper_title" --title "Internet" --passwordbox "Please enter your wireless passphrase" 10 70 2> $TMP/ppassphrase
                ppassphrase=$(cat $TMP/ppassphrase)
                wpa_passphrase "$pssid" "$ppassphrase" >> /etc/wpa_supplicant.conf
                wpa_supplicant -B -Dwext -i $my_networks -c /etc/wpa_supplicant.conf & >/dev/null
            fi

            #dhcpcd $my_networks
            # wget -q --tries=10 --timeout=5 http://www.google.com -O /tmp/index.google &> /dev/null
            # if [ ! -s /tmp/index.google ] ; then
            #     dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "It appears you have no internet connection, refer to for instructions on loading your required wireless kernel modules.\n\nhttps://wiki.archlinux.org/index.php/Wireless_Setup" 20 30
            # else
            #     dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "It appears you have an internet connection, huzzah for small miracles. :p" 10 30
            # fi
        fi

        dialog --clear --backtitle "$upper_title" --title "Internet" --msgbox "Internet configuration complete.\n\n Hit enter to return to menu" 10 30
    }

    cleanup() {
        dialog --clear --backtitle "$upper_title" --title "Cleaning up" --msgbox "Unmount /mnt/*" 10 30
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
     
        umount /mnt/* 2>/dev/null

        dialog --clear --backtitle "$upper_title" --title "Cleaning up" --msgbox "Unmounted /mnt/*.\n\nHit enter to return to menu" 10 30
    }

    initial_install() {
        dialog --clear --backtitle "$upper_title" --title "Initial install" --msgbox "Install base base-devel sudo git rsync wget zsh" 10 30
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
        
        echo "" > $TMP/ppkgs
        dialog --clear --backtitle "$upper_title" --title "Custom packages" --inputbox "Please enter any packages you would like added to the initial base system installation.\n\nSeperate multiple packages with a space.\n\nIf you do not wish to add any packages beyond the default:\nbase base-devel sudo git rsync wget zsh\nleave input blank and continue." 40 70 2> $TMP/ppkgs
        ppkgs=" $(cat $TMP/ppkgs)"

        pacstrap -i /mnt base base-devel sudo git rsync wget zsh$ppkgs
        #pacstrap /mnt base base-devel sudo git rsync wget zsh$ppkgs
        dialog --clear --backtitle "$upper_title" --title "Initial install" --msgbox "Installed base base-devel sudo git rsync wget zsh$ppkgs to /mnt.\n\n Hit enter to return to menu" 30 50
    }

    chroot_configuration() {
        dialog --clear --backtitle "$upper_title" --title "Chroot" --msgbox "Chroot into mounted filesystem" 10 30 
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
         
        #if [ ! -f /mnt/chroot-rs.sh ]; then
            wget https://raw.github.com/idk/pdq/master/chroot-rs.sh -O chroot-rs.sh
            chmod +x chroot-rs.sh
            cp /etc/resolv.conf /mnt/etc/resolv.conf
            mv chroot-rs.sh /mnt/chroot-rs.sh
            arch-chroot /mnt /bin/sh -c "./chroot-rs.sh"
    }

    generate_fstab() {
        dialog --clear --backtitle "$upper_title" --title "fstab configuration" --msgbox "Generate fstab" 10 30
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
       
        genfstab -U -p /mnt >> /mnt/etc/fstab
        dialog --clear --backtitle "$upper_title" --title "fstab configuration" --yesno "Do you wish to view/edit this file?" 10 30
        if [ $? = 0 ] ; then
            nano /mnt/etc/fstab
        fi
        
        dialog --clear --backtitle "$upper_title" --title "fstab configuration" --msgbox "Hit enter to return to menu" 10 30
    }

    finishup() {
        dialog --clear --backtitle "$upper_title" --title "Finishing up" --msgbox "Finish install and reboot" 10 30
        if [ $? = 255 ] ; then
            installer_menu
            return 0 
        fi
        
        dialog --clear --backtitle "$upper_title" --title "Finishing up" --msgbox "Arch Linux has been installed!\n\nAfter reboot, to complete install of pdqOS:\n\nlogin as your created user and run: sh rs.sh\n\nAlternatively, do not run rs.sh and setup your system to your own liking.\n\nSee ya!" 30 60
        reboot
    }


	# Main Program 
	# Welcome the user, allow for early exit if not interested
	kdialog --title "Welcome to mooOS Installer" --yesno "Welcome to mooOS Installer..  \nPlease, click OK to Continue or CANCEL to exit"

	# If the user decided to continue, present a menu
	if [[ $? -ne 1 ]]; then
	  installer_menu
	fi


else
	yad --width 300 --title "Shell" --image=$installer_icon --button="gtk-ok:0" --text "Run as root"
fi


exit 0


		yad --image=system-run-symbolic --title="mooOS Installer" --text="Locale, Timezone and Language" --form --field="Locale:CB" --field="Language:CB" --field="Timezone:CB"  "en_US.UTF-8" "English, American" "UTC +0" --button="Revert to Default:2" --button="Next:0" --button="gtk-cancel:1"



		yad --image=preferences-other-symbolic --window-icon=settings --title="mooOS Installer" --text="Package Configuration" --form --field="Proxy:CB" --field="Weechat Setup:CHK" --field="LAMP Setup:CHK" --list --text="Content of"  "Yes" TRUE FALSE --button="Revert to Default:2" --button="gtk-ok:0" --button="gtk-cancel:1"

	yad --image=drive-harddisk-usb-symbolic --title="mooOS Installer" --text="Partitioning and Drives" --form --field="View Disk Partitioning:CB" --field="Partition Editor:CB" "df -h" "cfdisk"  --button="Revert to Default:2" --button="gtk-ok:0" --button="gtk-cancel:1"

