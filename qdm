#!/usr/bin/bash
## Part of mooOS-dev-tools - https://github.com/idk/mooOS-dev-tools
## pdq 08-13-2013 - PRESENT
## License: GPL3

## This script is run as $USER then following that as root
## This script creates the mooOS livecd ISO image files from current OS


## DO NOT EDIT BELOW UNLESS YOU KNOW WHAT YOURE DOING ##

######### START CONFIGURATION ##########
. /etc/moo.cfg

######### START FUNCTIONS ##############
#. /usr/share/moo-tools/create_iso/moo_functions

 ## set live user
[ $SUDO_USER ] && moo=$SUDO_USER || moo=$(whoami)

## store current working directory 
PWD=$(pwd)

## figure out architecture type
archtype="$(uname -m)"

upper_title="Welcome to mooOS backup utility $archtype"

MOO_LOG_PATH="/home/$moo/.moolog"

# dialog --clear --backtitle "$upper_title" --title "Preferences" --yes-label "Text Mode" --no-label "Graphical Mode" --yesno "Chose the backup utility Type." 20 70
# if [ $? = 0 ] ; then
      DIALOG=${DIALOG=dialog}
# else
#     DIALOG=${DIALOG=Xdialog}
# fi

$DIALOG --clear --backtitle "$upper_title" --title "Information" --msgbox "You can decrease/increase the FONT SIZE with Ctrl+Down/Up arrow keys.\n\nFeel free to use gparted or other GNU/Linux tools to manage your partitioning schema before running this backup utility.\n\nIf manual partitioning IS done then you SHOULD skip right to \"Step 3 Format and/or mount filesystems\"" 20 70
if [ "$archtype" != "x86_64" ] || [ $? = 255 ] ; then
    exit 0
fi

setterm -blank 0

## styling
clr="\Zb"
clr_end="\Zn"

## temporary files
_TEMP=/tmp/answer$$
mkdir -p /tmp/tmp 2>/dev/null
_CURRENT=/tmp/current

## functions
exiting_mkmoo() {
    clear
    rm -f $_TEMP
    $DIALOG --clear --backtitle "$upper_title" --title "Exiting Script" --msgbox "type: sudo mkmoo to re-run" 10 40
    exit 0
}

current_selection() {
    echo "$1" > $_CURRENT
}

mkmoo_menu() {

    CUR=$(cat $_CURRENT)
    $DIALOG \
        --default-item "$CUR" --colors --backtitle "$upper_title" --title "$upper_title" \
        --menu "Select action: (Do them in order)" 20 60 9 \
        1 $clr"Update system"$clr_end \
        2 $clr"Update github repos"$clr_end \
        3 $clr"Update local repos"$clr_end \
        4 $clr"Update remote repos"$clr_end \
        5 $clr"Bump mooOS version"$clr_end \
        6 $clr"Build mooOS"$clr_end \
        7 $clr"Sync mooOS to local server"$clr_end \
        8 $clr"Sync mooOS to remote server"$clr_end \
        9 $clr"Exit" 2>$_TEMP

    if [ $? = 1 ] || [ $? = 255 ] ; then
        exiting
        return 0
    fi

    choice=$(cat $_TEMP)
    case $choice in
        1) update_moo;;
        2) update_moohub;;
        3) update_local;;
        4) update_remote;;
        5) bump_moo;;
        6) build_moo;;
        7) sync_local;;
        8) sync_remote;;
        9) exiting_mkmoo;;
    esac
}

clean_return() {
    if [ $? = 255 ] ; then
        mkmoo_menu
        return 0            
    fi
}

moo_log() {
	log_type=$1
	log_title="$2"
	if [ "$log_type" = "start" ]; then
		rm -f $MOO_LOG_PATH
	    echo "Initialize log" >> $MOO_LOG_PATH
	    echo "$log_title" >> $MOO_LOG_PATH
	    tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/test$$
	    trap 'rm -f $tempfile; stty sane; exit 1' 1 2 3 15
	    dialog --clear --backtitle "$upper_title" --title "$log_title" \
	        --begin 7 1 --tailboxbg $MOO_LOG_PATH 19 80 \
	        --and-widget \
	        --begin 1 20 --msgbox "Press <Enter> ONLY once completed" 5 40 \
	        2>$tempfile &
	    mypid=$!
	else
		echo ""
        echo "$log_title completed! You may proceed..." >> $MOO_LOG_PATH
        wait $mypid
        rm -f $tempfile
        $DIALOG --clear --backtitle "$upper_title" --title "$log_title completed" --msgbox "Proceed" 10 30
	fi
}

check_repos() {
	moo_log start "Checked repos"
	while true
	do
		if [ $2 -eq 1 ]; then
			torsocks curl -s -o "/dev/null" "$1"
		else
			curl -s -o "/dev/null" "$1"
		fi

		if [ $? -ne 0 ] ; then
			echo "Error occurred getting URL $1: rechecking in 10 seconds" >> $MOO_LOG_PATH 2>&1
		elif [ $? -eq 6 ]; then
			echo "Unable to resolve host: rechecking in 10 seconds" >> $MOO_LOG_PATH 2>&1
		elif [ $? -eq 7 ]; then
			echo "Unable to connect to host: rechecking in 10 seconds" >> $MOO_LOG_PATH 2>&1
		else
			echo "$1 is UP! :D proceeding..." >> $MOO_LOG_PATH 2>&1
			notify-send "$1 is UP! :D proceeding..." -i "$MOO_ICON"

			break
		fi
		sleep 10s
	done
	moo_log end "Checked repos"
}

update_moohub() {
	$DIALOG --clear --backtitle "$upper_title" --title "Update github" --yesno "Run github sync?" 10 30
	if [ $? = 0 ] ; then
		moo_log start "Update github"
		if [ $(id -u) -eq 0 ]; then
			pacman -Qqe  | grep -vx "$(pacman -Qqg base)" | grep -vx "$(cat ${MOO_TOOLS_PATH}exclude_pkgs)" > ${MOO_TOOLS_PATH}packages.both >> $MOO_LOG_PATH 2>&1
			su -l $MOO_USER -c "gh -b" >> $MOO_LOG_PATH 2>&1
		else
			su -l "root" -c "pacman -Qqe  | grep -vx \"$(pacman -Qqg base)\" | grep -vx \"$(cat ${MOO_TOOLS_PATH}exclude_pkgs)\" > ${MOO_TOOLS_PATH}packages.both" >> $MOO_LOG_PATH 2>&1
			gh -b >> $MOO_LOG_PATH 2>&1
		fi
		moo_log end "Update github"
	fi
}

update_moo() {
	$DIALOG --clear --backtitle "$upper_title" --title "Update packages" --yesno "Run system updates?" 10 30
	if [ $? = 0 ] ; then
		$DIALOG --clear --backtitle "$upper_title" --title "Update packages" --defaultno --yesno "With --devel?" 10 30
		if [ $? = 0 ] ; then
			devel=" --devel"
		fi

		moo_log start "Update packages"

		echo "${bldgreen}Applying i686 updates...${txtrst}" >> $MOO_LOG_PATH 2>&1
		schroot -p -- sudo pacman -Syu && schroot -p -- pacaur -Syua$devel --noedit --rebuild >> $MOO_LOG_PATH 2>&1
		notify-send "Applied i686 updates" -i "$MOO_ICON"
		echo "${bldgreen}Applying x86_64 updates...${txtrst}" >> $MOO_LOG_PATH 2>&1
		sudo pacman -Syu && pacaur -Syua$devel --noedit --rebuild >> $MOO_LOG_PATH 2>&1
		notify-send "Applied x86_64 updates" -i "$MOO_ICON"

		moo_log end "Update packages"
	fi
}

repackage_this() {
	moo_log start "Build packages"

	package_name="$1"
	package_repos="$2"
	package_type="$3"
	package_install="$4"
	delete_custom_package_caches "$package_name"
	mkdir -vp "${MOO_HOME}abs/$package_name" >> $MOO_LOG_PATH 2>&1
	cd "${MOO_HOME}abs/$package_name"
	for urls in $package_repos
	do
		wget "$urls" >> $MOO_LOG_PATH 2>&1
	done
	if [ "$package_type" == "x86_64" ] || [ "$package_type" == "any" ]; then
		makepkg -sf$package_install
	fi
	if [ "$package_type" == "i686" ] || [ "$package_type" == "any" ]; then
		schroot -p -- makepkg -sf$package_install
	fi
	cd "$PWD"

	moo_log end "Build packages"
}

create_custom_packages() {
	$DIALOG --clear --backtitle "$upper_title" --title "Rebrand packages" --yesno "Rebrand packages? (moo-tools/moo-scripts/moo-zsh/moo-wallpapers/gh/vb-pdq)" 10 30
	if [ $? = 0 ] ; then
		## moo-scripts
		delete_custom_package_caches "moo-scripts"
		repackage_this "moo-scripts" "https://raw.github.com/idk/bin/master/PKGBUILD" "any" i
		
		## moo-tools
		delete_custom_package_caches "moo-tools"
		repackage_this "moo-tools" "https://raw.github.com/idk/mooOS-dev-tools/master/installer/PKGBUILD https://raw.github.com/idk/mooOS-dev-tools/master/installer/moo-tools.install" "any" i
		
		## moo-zsh
		delete_custom_package_caches "moo-zsh"
		repackage_this "moo-zsh" "https://raw.github.com/idk/zsh/master/PKGBUILD https://raw.github.com/idk/zsh/master/moo-zsh.install" "any" i
	
		## github wrapper
		delete_custom_package_caches "gh"
		repackage_this "gh" "https://raw.github.com/idk/gh/master/PKGBUILD" "any" i

		## install custom mooOS wallpapers
		#delete_custom_package_caches "moo-wallpapers"
		#repackage_this "moo-wallpapers" "https://raw.github.com/idk/mooOS-wallpapers/master/PKGBUILD https://raw.github.com/idk/mooOS-wallpapers/master/moo-wallpapers.install http://repo.mooos.pdq/mooOS-wallpapers.tar.gz" "any"
		
		## vimb web browser and tabbed, patched!
		#delete_custom_package_caches "vb-pdq"
		#repackage_this "vb-pdq" "https://raw.github.com/idk/vb-pdq/master/PKGBUILD https://raw.github.com/idk/vb-pdq/master/vb-pdq.install" "any"
	fi

	$DIALOG --clear --backtitle "$upper_title" --title "Rebrand packages" --yesno "Rebrand packages? (filesystem/grub/lsb-release/syslinux/hardinfo)" 10 30
	if [ $? = 0 ] ; then
		moo_log start "Rebrand packages"
		## sync ABS
		echo "${bldgreen}Syncing Arch Build System...${txtrst}" >> $MOO_LOG_PATH 2>&1
		sudo abs >> $MOO_LOG_PATH 2>&1

		## FILESYSTEM
		delete_custom_package_caches "filesystem" >> $MOO_LOG_PATH 2>&1
		cp -vr /var/abs/core/filesystem/ ${MOO_HOME}abs >> $MOO_LOG_PATH 2>&1
		cp -vf ${MOO_TOOLS_PATH}filesystem/issue ${MOO_HOME}abs/filesystem/ >> $MOO_LOG_PATH 2>&1
		cp -vf ${MOO_TOOLS_PATH}filesystem/os-release ${MOO_HOME}abs/filesystem/ >> $MOO_LOG_PATH 2>&1
		FILESYSTEM_HASH=$(md5sum ${MOO_HOME}abs/filesystem/issue | awk '{print $1}')
		FILESYSTEM2_HASH=$(md5sum ${MOO_HOME}abs/filesystem/os-release | awk '{print $1}')
		sed -i "s/7813c481156f6b280a3ba91fc6236368/$FILESYSTEM_HASH/g" ${MOO_HOME}abs/filesystem/PKGBUILD
		sed -i "s/b16a4674ccf3a932ff34c6c8393a4f33/$FILESYSTEM2_HASH/g" ${MOO_HOME}abs/filesystem/PKGBUILD
		cd ${MOO_HOME}abs/filesystem
		makepkg -sf >> $MOO_LOG_PATH 2>&1
		schroot -p -- makepkg -sf >> $MOO_LOG_PATH 2>&1
		cd "$PWD"

		## LSB-RELEASE
		delete_custom_package_caches "lsb-release" >> $MOO_LOG_PATH 2>&1
		cp -vr /var/abs/community/lsb-release/ ${MOO_HOME}abs >> $MOO_LOG_PATH 2>&1
		cp -vf ${MOO_TOOLS_PATH}lsb-release/PKGBUILD ${MOO_HOME}abs/lsb-release/ >> $MOO_LOG_PATH 2>&1
		cp -vf ${MOO_TOOLS_PATH}lsb-release/lsb-release.install ${MOO_HOME}abs/lsb-release/ >> $MOO_LOG_PATH 2>&1
		cd ${MOO_HOME}abs/lsb-release
		makepkg -sf >> $MOO_LOG_PATH 2>&1
		schroot -p -- makepkg -sf >> $MOO_LOG_PATH 2>&1
		cd "$PWD"

		## GRUB
		delete_custom_package_caches "grub" >> $MOO_LOG_PATH 2>&1
		cp -vr /var/abs/testing/grub ${MOO_HOME}abs/grub >> $MOO_LOG_PATH 2>&1
		sed -i "s/\"Arch\"/\"mooOS\"/g" ${MOO_HOME}abs/grub/grub.default
		sed -i "s/Arch Linux/mooOS GNU\/Linux/g" ${MOO_HOME}abs/grub/grub.cfg
		GRUB_HASH=$(md5sum ${MOO_HOME}abs/grub/grub.default | awk '{print $1}')
		GRUB_HASH2=$(md5sum ${MOO_HOME}abs/grub/grub.cfg | awk '{print $1}')
		sed -i "s/a03ffd56324520393bf574cefccb893d/$GRUB_HASH/g" ${MOO_HOME}abs/grub/PKGBUILD
		sed -i "s/c8b9511586d57d6f2524ae7898397a46/$GRUB_HASH2/g" ${MOO_HOME}abs/grub/PKGBUILD
		cd ${MOO_HOME}abs/grub
		makepkg -sf >> $MOO_LOG_PATH 2>&1
		schroot -p -- makepkg -sf >> $MOO_LOG_PATH 2>&1
		cd "$PWD"

		## SYSLINUX
		delete_custom_package_caches "syslinux" >> $MOO_LOG_PATH 2>&1
		cp -vr /var/abs/core/syslinux/ ${MOO_HOME}abs >> $MOO_LOG_PATH 2>&1
		sed -i "s/Arch Linux/mooOS GNU\/Linux/g" ${MOO_HOME}abs/syslinux/syslinux.cfg
        sed -i "s,#MENU BACKGROUND splash.png,MENU BACKGROUND /usr/share/moo-tools/images/splash.png,g" ${MOO_HOME}abs/syslinux/syslinux.cfg
        sed -i "s/UI menu.c32/#UI menu.c32/g" ${MOO_HOME}abs/syslinux/syslinux.cfg
        sed -i "s/#UI vesamenu.c32/UI vesamenu.c32/g" ${MOO_HOME}abs/syslinux/syslinux.cfg
        sed -i "s/TIMEOUT 50/TIMEOUT 300/g" ${MOO_HOME}abs/syslinux/syslinux.cfg
		SYSLINUX_HASH=$(md5sum ${MOO_HOME}abs/syslinux/syslinux.cfg | awk '{print $1}')
		sed -i "s/46ca150f53322ff8f1597d9a342f7e40/$SYSLINUX_HASH/g" ${MOO_HOME}abs/syslinux/PKGBUILD
		cd ${MOO_HOME}abs/syslinux
		makepkg -sf >> $MOO_LOG_PATH 2>&1
		schroot -p -- makepkg -sf >> $MOO_LOG_PATH 2>&1
		cd "$PWD"

		## HARDINFO
		delete_custom_package_caches "hardinfo" >> $MOO_LOG_PATH 2>&1
		cp -vr /var/abs/community/hardinfo/ ${MOO_HOME}abs >> $MOO_LOG_PATH 2>&1
		sed -i "s/Arch Linux/mooOS GNU\/Linux/g" ${MOO_HOME}abs/hardinfo/hardinfo.distro
		HARDINFO_HASH=$(sha1sum ${MOO_HOME}abs/hardinfo/hardinfo.distro | awk '{print $1}')
		sed -i "s/\"arch\"/\"mooos\"/g" ${MOO_HOME}abs/hardinfo/PKGBUILD
		sed -i "s/4c31cbbfbdeb48593641ff600c8d4fb7bda2b01c/$HARDINFO_HASH/g" ${MOO_HOME}abs/hardinfo/PKGBUILD
		cd ${MOO_HOME}abs/hardinfo
		makepkg -sf >> $MOO_LOG_PATH 2>&1
		#TODO
		#schroot -p -- makepkg -sf
		cd "$PWD"
		notify-send "Rebranded packages" -i "$MOO_ICON"
		moo_log end "Rebrand packages"
	fi
}

delete_package_caches() {
	moo_log start "Delete packages cache"
	echo "${bldgreen}Deleting old packages cache...${txtrst}" >> $MOO_LOG_PATH 2>&1
	#sudo pkgcacheclean -v 1
	schroot -p -- sudo pkgcacheclean -v 1 >> $MOO_LOG_PATH 2>&1
	sudo pkgcacheclean -v -k --cachedir=${ABS_BASE_DIR}mooOS-pkgs-32/ 1 >> $MOO_LOG_PATH 2>&1
	sudo pkgcacheclean -v -k --cachedir=${ABS_BASE_DIR}mooOS-pkgs-64/ 1 >> $MOO_LOG_PATH 2>&1
	sudo pkgcacheclean -v -k --cachedir=${MOO_HOME}abs/i686 1 >> $MOO_LOG_PATH 2>&1
	sudo pkgcacheclean -v -k --cachedir=${MOO_HOME}abs/x86_64 1 >> $MOO_LOG_PATH 2>&1
	mv ${ABS_BASE_DIR}mooOS-pkgs-32/*nvidia* ${ABS_BASE_DIR}nonfree/ >> $MOO_LOG_PATH 2>&1
	mv ${ABS_BASE_DIR}mooOS-pkgs-64/*nvidia* ${ABS_BASE_DIR}nonfree/ >> $MOO_LOG_PATH 2>&1
	moo_log end "Delete packages cache"
}

delete_custom_package_caches() {
	if [ "$1" != "" ]; then
		moo_log start "Delete custom packages cache"
		sudo rm -v ${ABS_BASE_DIR}mooOS-pkgs-32/$1-* >> $MOO_LOG_PATH 2>&1
		sudo rm -v ${ABS_BASE_DIR}mooOS-pkgs-64/$1-* >> $MOO_LOG_PATH 2>&1
		sudo rm -v ${MOO_HOME}abs/i686/$1-* >> $MOO_LOG_PATH 2>&1
		sudo rm -v ${MOO_HOME}abs/x86_64/$1-* >> $MOO_LOG_PATH 2>&1
		rm -fvr ${MOO_HOME}abs/$1 >> $MOO_LOG_PATH 2>&1
		moo_log end "Delete custom packages cache"
	fi
}

rsync_iso_remote() {
	## sync .iso to remote server
	ARCH_ISO=$1
	$DIALOG --clear --backtitle "$upper_title" --title "rsync ISO" --yesno "Do you wish to rysnc this ${ARCH_ISO} iso to local/remote servers" 10 30
	if [ $? = 0 ] ; then
		moo_log start "rysnc ${ARCH_ISO} iso"
		echo "
================syncing ${ARCH_ISO} iso to local storage repos=================== >> $MOO_LOG_PATH 2>&1
"
		su -l $MOO_USER -c "rm -v $ISO_STORAGE/mooOS-beta-${ARCH_ISO}-old.iso" >> $MOO_LOG_PATH 2>&1
		su -l $MOO_USER -c "mv -fv $ISO_STORAGE/mooOS-beta-${ARCH_ISO}.iso $ISO_STORAGE/mooOS-beta-${ARCH_ISO}-old.iso" >> $MOO_LOG_PATH 2>&1
		su -l $MOO_USER -c "cp -fv $ISO_DIR/*-${ARCH_ISO}.iso $ISO_STORAGE/mooOS-beta-${ARCH_ISO}.iso" >> $MOO_LOG_PATH 2>&1

		## Mount server filesystem to localhost
		# path to remote repo credentials file
		su -l $MOO_USER -c "cat /mnt/linux-pdq/media/truecrypt1/private/repo_creds > /tmp/repo_creds"
		REPO_CREDS=/tmp/repo_creds

		## if remote web server exists
		if [ "$REPO_CREDS" ] ; then
			. $REPO_CREDS

			## override credentials file
			_iso_sync[2]="$ISO_STORAGE/mooOS-beta-${ARCH_ISO}.iso"

			## rsync .iso using vars defined in credentials, e.g.:
			port=$(eval echo $(echo '${'_iso_sync[1]'}'))
			flags=$(eval echo $(echo '${'_iso_sync[4]'}'))
			src=$(eval echo $(echo '${'_iso_sync[2]'}'))
			dest=$(eval echo $(echo '${'_iso_sync[3]'}'))

			echo "================syncing iso to remote server==================="
			echo "This may take a while..."
			su -l $MOO_USER -c "rsync -avcPh $flags -e 'ssh -p $port' $src $dest" >> $MOO_LOG_PATH 2>&1 # -n, --dry-run perform a trial run with no changes made

			rm "$REPO_CREDS"
		fi

		echo "${ARCH_ISO} synced" >> $MOO_LOG_PATH 2>&1
		notify-send "${ARCH_ISO} synced" -i "$MOO_ICON"
	fi
	moo_log end "rysnc ${ARCH_ISO} iso"
}

umount_work_env() {
	## unmount work env
	moo=$1
	$DIALOG --clear --backtitle "$upper_title" --title "Unmount work env" --yesno "Do you wish to unmount the $moo work env" 10 30
	if [ $? = 0 ] ; then
		moo_log start "Unmount ${ARCH_ISO} env"
		umount $WORK_DIR/$moo/root-image/dev >> $MOO_LOG_PATH 2>&1
		umount $WORK_DIR/$moo/root-image/ >> $MOO_LOG_PATH 2>&1
		rm -vr $WORK_DIR/$moo >> $MOO_LOG_PATH 2>&1
		rm -v $WORK_DIR/*$moo >> $MOO_LOG_PATH 2>&1
		rm -r $WORK_DIR/iso/$moo/$moo >> $MOO_LOG_PATH 2>&1
		rm -v $WORK_DIR/iso/$moo/*.$moo.* >> $MOO_LOG_PATH 2>&1
		rm -r $WORK_DIR/iso/$moo/boot/$moo >> $MOO_LOG_PATH 2>&1
		moo_log end "Unmount ${ARCH_ISO} env"
	fi
}

create_build_env() {
	$DIALOG --clear --backtitle "$upper_title" --title "Create build env" --yesno --defaultno "Do you wish to skip to create iso" 10 30
	if [ $? -ne 0 ] ; then
		moo_log start "Create build env"
		PWD=$(pwd)
		echo "${bldyellow}Copying configuration files and recreating repos now...${txtrst}" >> $MOO_LOG_PATH 2>&1

		## copy root files

		## profile-sync-daemon
		cp -v /etc/psd.conf ${ARCHLIVE}archlive/releng/root-image/etc/psd.conf >> $MOO_LOG_PATH 2>&1
		
		## resolv.conf
		cp -v /etc/resolv.conf ${ARCHLIVE}archlive/releng/root-image/etc/resolv.conf >> $MOO_LOG_PATH 2>&1
		
		## resolv.conf.head
		cp -v /etc/resolv.conf.head ${ARCHLIVE}archlive/releng/root-image/etc/resolv.conf.head >> $MOO_LOG_PATH 2>&1
		
		## dnsmasq
		cp -v /etc/dnsmasq.conf ${ARCHLIVE}archlive/releng/root-image/etc/dnsmasq.conf >> $MOO_LOG_PATH 2>&1
		
		## dhcpcd
		cp -v /etc/dhcpcd.conf ${ARCHLIVE}archlive/releng/root-image/etc/dhcpcd.conf >> $MOO_LOG_PATH 2>&1
		
		## nano config
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/usr/share/nano >> $MOO_LOG_PATH 2>&1
		cp -v /usr/share/nano/pkgbuild.nanorc ${ARCHLIVE}archlive/releng/root-image//usr/share/nano/pkgbuild.nanorc >> $MOO_LOG_PATH 2>&1
		
		## e17 backgrounds
		cp -v /usr/share/enlightenment/data/backgrounds/mooOS* ${ARCHLIVE}archlive/releng/root-image/usr/share/enlightenment/data/backgrounds >> $MOO_LOG_PATH 2>&1
		
		## tor config
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/tor >> $MOO_LOG_PATH 2>&1
		cp -v /etc/torrc ${ARCHLIVE}archlive/releng/root-image/etc/tor/torrc >> $MOO_LOG_PATH 2>&1
		
		## privoxy config
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/privoxy >> $MOO_LOG_PATH 2>&1
		sh -c "echo 'forward-socks5 / localhost:9050 .' > ${ARCHLIVE}archlive/releng/root-image/etc/privoxy/config" >> $MOO_LOG_PATH 2>&1
		
		## dansguardian config
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/dansguardian >> $MOO_LOG_PATH 2>&1
		cp -v /etc/dansguardian/dansguardian.conf ${ARCHLIVE}archlive/releng/root-image/etc/dansguardian/dansguardian.conf >> $MOO_LOG_PATH 2>&1
		
		## squid config
		#mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/squid
		#cp -v /etc/squid/squid.conf ${ARCHLIVE}archlive/releng/root-image/etc/squid/squid.conf >> $MOO_LOG_PATH 2>&1

		## TODO
		#mv -v /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.bak >> $MOO_LOG_PATH 2>&1
		#cp -v ${dev_directory}etc/httpd.conf /etc/httpd/conf/httpd.conf >> $MOO_LOG_PATH 2>&1
		#cp -v ${dev_directory}etc/httpd-phpmyadmin.conf /etc/httpd/conf/extra/httpd-phpmyadmin.conf >> $MOO_LOG_PATH 2>&1
		#mv -v /etc/php/php.ini /etc/php/php.ini.bak >> $MOO_LOG_PATH 2>&1
		#cp -v ${dev_directory}etc/php.ini /etc/php/php.ini >> $MOO_LOG_PATH 2>&1

		## copy over pentadactyl files
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.pentadactyl/colors >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.pentadactyl/plugins >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.pentadactyl/colors/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.pentadactyl/colors >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.pentadactyl/plugins/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.pentadactyl/plugins >> $MOO_LOG_PATH 2>&1
		
		## copy over rss reader files
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.canto-ng >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.canto-ng/config ${ARCHLIVE}archlive/releng/root-image/etc/skel/.canto-ng/config >> $MOO_LOG_PATH 2>&1
		
		## copy over firefox files
		su -l $MOO_USER -c "cp -vr ${MOO_HOME}.mozilla/firefox/qrtww0pl.Default-User/* ${MOO_HOME}info/firefox/qrtww0pl.Default-User" >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.mozilla/firefox/qrtww0pl.Default-User >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}info/firefox/qrtww0pl.Default-User/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.mozilla/firefox/qrtww0pl.Default-User >> $MOO_LOG_PATH 2>&1
		
		## copy over ~/.local files
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.local/applications >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.local/applications/defaults.list ${ARCHLIVE}archlive/releng/root-image/etc/skel/.local/applications/defaults.list >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.local/applications/tabbed.desktop ${ARCHLIVE}archlive/releng/root-image/etc/skel/.local/applications/tabbed.desktop >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.local/applications/URxvt.desktop ${ARCHLIVE}archlive/releng/root-image/etc/skel/.local/applications/URxvt.desktop >> $MOO_LOG_PATH 2>&1

		## copy over ~/.* (dotfiles)
		cp -v ${MOO_HOME}.Xdefaults ${ARCHLIVE}archlive/releng/root-image/etc/skel/.Xdefaults >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.xinitrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.xinitrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.zshrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.zshrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.gtkrc-2.0 ${ARCHLIVE}archlive/releng/root-image/etc/skel/.gtkrc-2.0 >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.nanorc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.nanorc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.dialogrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.dialogrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.pentadactylrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.pentadactylrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.dialogrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.dialogrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.wgetrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.wgetrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.curlrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.curlrc >> $MOO_LOG_PATH 2>&1
		
		## copy over ~/.themes
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.themes/Black >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.themes/Black/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.themes/Black >> $MOO_LOG_PATH 2>&1
		
		## copy over ~/.fonts
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.fonts >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.fonts/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.fonts >> $MOO_LOG_PATH 2>&1
		
		## copy over kde files
		mkdir -vp  ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/color-schemes >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/kdenlive >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/dolphin/view_properties/global >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/kde4/services/ServiceMenus >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/konsole >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.kde4/share/apps/color-schemes/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/color-schemes >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/apps/kdenlive/kdenliveui.rc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/kdenlive/kdenliveui.rc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/kdenliveuirc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/kdenliveuirc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/..directory ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/dolphin/view_properties/global/.directory >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/startupconfig ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/startupconfig >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/konsolerc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/konsolerc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/kservicemenurc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/kservicemenurc >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.kde4/share/kde4/services/ServiceMenus/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/kde4/services/ServiceMenus >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.kde4/share/apps/konsole/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/konsole >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/dolphinrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/dolphinrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/apps/dolphin/dolphinui.rc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/apps/dolphin/dolphinui.rc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/gtkrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/gtkrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/kcmdisplayrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/kcmdisplayrc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.kde4/share/config/gtkrc-2.0 ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/gtkrc-2.0 >> $MOO_LOG_PATH 2>&1
		
		## copy over ~/.gnupg
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.gnupg >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.gnupg/gpg-agent.conf ${ARCHLIVE}archlive/releng/root-image/etc/skel/.gnupg/gpg-agent.conf >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.gnupg/gpg.conf ${ARCHLIVE}archlive/releng/root-image/etc/skel/.gnupg/gpg.conf >> $MOO_LOG_PATH 2>&1

		## copy over transmission file
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/transmission-daemon >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/settings.json ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/transmission-daemon/settings.json >> $MOO_LOG_PATH 2>&1
		
		## copy over key-mon config
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/key-mon >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.config/key-mon/config ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/key-mon/config >> $MOO_LOG_PATH 2>&1
		
		## copy lxtask config
		cp -v ${MOO_HOME}.config/lxtask.conf ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/lxtask.conf >> $MOO_LOG_PATH 2>&1

		## copy Trolltech config
		cp -v ${MOO_HOME}.config/Trolltech.conf ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/Trolltech.conf >> $MOO_LOG_PATH 2>&1
		
		## copy pavucontrol config
		cp -v ${MOO_HOME}.config/pavucontrol.ini ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/pavucontrol.ini >> $MOO_LOG_PATH 2>&1
		
		## copy over mocp file
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.moc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.moc/config ${ARCHLIVE}archlive/releng/root-image/etc/skel/.moc/config >> $MOO_LOG_PATH 2>&1
		
		## copy htop file
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/htop >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.config/htop/htoprc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/htop/htoprc >> $MOO_LOG_PATH 2>&1
		
		## copy sublime text 3 files
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/sublime-text-3/Packages/User >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/sublime-text-3/Packages/Theme\ -\ Nil >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.config/sublime-text-3/Packages/Theme\ -\ Nil/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/sublime-text-3/Packages/Theme\ -\ Nil/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.config/sublime-text-3/Packages/User/Preferences.sublime-settings ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/sublime-text-3/Packages/User/Preferences.sublime-settings >> $MOO_LOG_PATH 2>&1
		## as above but root
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/root/.config/sublime-text-3/Packages/User >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/root/.config/sublime-text-3/Packages/Theme\ -\ Nil >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.config/sublime-text-3/Packages/Theme\ -\ Nil/* ${ARCHLIVE}archlive/releng/root-image/root/.config/sublime-text-3/Packages/Theme\ -\ Nil/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.config/sublime-text-3/Packages/User/Preferences.sublime-settings ${ARCHLIVE}archlive/releng/root-image/root/.config/sublime-text-3/Packages/User/Preferences.sublime-settings >> $MOO_LOG_PATH 2>&1
		
		## mooOS icon
		cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/HighContrast/16x16/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/HighContrast/256x256/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/HighContrast/32x32/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/HighContrast/48x48/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/gnome/16x16/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/gnome/256x256/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/gnome/32x32/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/gnome/48x48/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-128.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/hicolor/128x128/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/hicolor/16x16/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/hicolor/256x256/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/hicolor/32x32/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/hicolor/48x48/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-128.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/oxygen/128x128/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-16.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/oxygen/16x16/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-256.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/oxygen/256x256/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-32.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/oxygen/32x32/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}images/mooOS-48.png ${ARCHLIVE}archlive/releng/root-image/usr/share/icons/oxygen/48x48/apps/mooOS.png >> $MOO_LOG_PATH 2>&1
		
		## copy vlc files
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/vlc >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/vlc-qt-interface.conf ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/vlc/vlc-qt-interface.conf >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}.config/vlc/vlcrc ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/vlc/vlcrc >> $MOO_LOG_PATH 2>&1
		
		## copy over window manager files
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/applications >> $MOO_LOG_PATH 2>&1
		#mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/backgrounds >> $MOO_LOG_PATH 2>&1
		mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config >> $MOO_LOG_PATH 2>&1
		#rm -r ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/themes >> $MOO_LOG_PATH 2>&1
		#mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/images >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.e/e/applications/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/applications >> $MOO_LOG_PATH 2>&1
		#cp -vr ${MOO_HOME}.e/e/backgrounds/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/backgrounds >> $MOO_LOG_PATH 2>&1
		cp -vr ${MOO_HOME}.e/e/config/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config >> $MOO_LOG_PATH 2>&1
		#cp -vr ${MOO_HOME}.e/e/themes/* ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/themes >> $MOO_LOG_PATH 2>&1
		#cp -v ${MOO_HOME}.e/e/images/tw_cache_images.eet ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/images/tw_cache_images.eet >> $MOO_LOG_PATH 2>&1
		rm -v ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config/standard/module.everything.cache.* >> $MOO_LOG_PATH 2>&1
		rm -v ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config/standard/exehist.* >> $MOO_LOG_PATH 2>&1
		rm -v ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config/standard/evry_exebuf_cache.* >> $MOO_LOG_PATH 2>&1
		rm -v ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config/standard/module.forecasts.* >> $MOO_LOG_PATH 2>&1
		#mkdir -vp ${ARCHLIVE}archlive/releng/root-image/usr/share/enlightenment/data/themes >> $MOO_LOG_PATH 2>&1
		#cp -vr /usr/share/enlightenment/data/themes/* ${ARCHLIVE}archlive/releng/root-image/usr/share/enlightenment/data/themes >> $MOO_LOG_PATH 2>&1

		## patch config files for username
		cd ${ARCHLIVE}archlive/releng/root-image/etc/skel/.e/e/config/standard
		for NEW_FILE in e.*
		do
			EWW_FILE=${NEW_FILE/.cfg/.src}
			eet -d $NEW_FILE config $EWW_FILE >> $MOO_LOG_PATH 2>&1
			sed -i "s/$MOO_USER/moo/g" $EWW_FILE
			rm -v $NEW_FILE >> $MOO_LOG_PATH 2>&1
			eet -e $NEW_FILE config $EWW_FILE 1 >> $MOO_LOG_PATH 2>&1
			rm -v $EWW_FILE >> $MOO_LOG_PATH 2>&1
		done
		cd "$PWD"
	
		## terminology
		cp -vr ${MOO_HOME}.config/terminology/config/standard/base.cfg ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/terminology/config/standard/base.cfg >> $MOO_LOG_PATH 2>&1
		## patch config files for username
		cd  ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/terminology/config/standard/
		eet -d base.cfg config base.src >> $MOO_LOG_PATH 2>&1
		sed -i "s/$MOO_USER/moo/g" base.src
		rm -v base.cfg >> $MOO_LOG_PATH 2>&1
		eet -e base.cfg config base.src 1 >> $MOO_LOG_PATH 2>&1
		rm -v base.src >> $MOO_LOG_PATH 2>&1
		cd "$PWD"

		## clean up files content
		sed -i "s/$MOO_USER/moo/g" ${ARCHLIVE}archlive/releng/root-image/etc/skel/.mozilla/firefox/qrtww0pl.Default-User/extensions.ini
		sed -i "s/$MOO_USER/moo/g" ${ARCHLIVE}archlive/releng/root-image/etc/skel/.config/transmission-daemon/settings.json
		sed -i "s/$MOO_USER/moo/g" ${ARCHLIVE}archlive/releng/root-image/etc/skel/.moc/config
		sed -i "s/$MOO_USER/moo/g" ${ARCHLIVE}archlive/releng/root-image/etc/skel/.kde4/share/config/dolphinrc
		sed -i "s/$MOO_USER/moo/g" ${ARCHLIVE}archlive/releng/root-image/etc/psd.conf 
		sed -i "s/$MOO_USER/moo/g" ${ARCHLIVE}archlive/releng/root-image/etc/skel/.gtkrc-2.0		

		## copy over hosts file (needed for LAN repos) TODO
		#cp -v /etc/hosts ${ARCHLIVE}archlive/releng/root-image/etc/hosts

		## cleanup Github local repos
		rm -rvf ${ARCHLIVE}archlive/releng/root-image/etc/skel/Github >> $MOO_LOG_PATH 2>&1
		## mooOS stuffs
	 	mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Desktop >> $MOO_LOG_PATH 2>&1
	 	mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Downloads >> $MOO_LOG_PATH 2>&1
	 	mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Videos >> $MOO_LOG_PATH 2>&1
	 	#mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Dropbox >> $MOO_LOG_PATH 2>&1
	 	mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Github >> $MOO_LOG_PATH 2>&1
	 	mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Music >> $MOO_LOG_PATH 2>&1
	 	mkdir -vp ${ARCHLIVE}archlive/releng/root-image/etc/skel/Pictures >> $MOO_LOG_PATH 2>&1

	 	## copy home files and create default directories
	 	cp -v ${MOO_TOOLS_PATH}misc/Desktop.* ${ARCHLIVE}archlive/releng/root-image/etc/skel/Desktop/ >> $MOO_LOG_PATH 2>&1
	 	cp -v ${MOO_TOOLS_PATH}misc/Downloads.* ${ARCHLIVE}archlive/releng/root-image/etc/skel/Downloads/ >> $MOO_LOG_PATH 2>&1
	 	cp -v ${MOO_HOME}Videos/Videos.* ${ARCHLIVE}archlive/releng/root-image/etc/skel/Videos/ >> $MOO_LOG_PATH 2>&1
	 	cp -v ${MOO_HOME}github/Github.* ${ARCHLIVE}archlive/releng/root-image/etc/skel/Github/ >> $MOO_LOG_PATH 2>&1
	 	cp -v ${MOO_TOOLS_PATH}misc/Music.* ${ARCHLIVE}archlive/releng/root-image/etc/skel/Music/ >> $MOO_LOG_PATH 2>&1
	 	cp -v ${MOO_TOOLS_PATH}misc/Pictures.* ${ARCHLIVE}archlive/releng/root-image/etc/skel/Pictures/ >> $MOO_LOG_PATH 2>&1

		echo "${bldyellow}Removing previous build and work directories...${txtrst}" >> $MOO_LOG_PATH 2>&1
		
		## deprecated method
		if [ -d "${ARCHLIVE}archlive/releng/work" ]; then
			rm -vr ${ARCHLIVE}archlive/releng/work >> $MOO_LOG_PATH 2>&1
		fi

		## new method
		if [ -d "$ISO_DIR" ]; then
			rm -vr "$ISO_DIR" >> $MOO_LOG_PATH 2>&1
		fi
		if [ -d "$WORK_DIR" ]; then
			rm -vr "$WORK_DIR" >> $MOO_LOG_PATH 2>&1
		fi

		## create pacman.conf for build
		mkdir -v "$WORK_DIR" && cp ${MOO_TOOLS_PATH}misc/pacman.conf ${WORK_DIR}/pacman.conf >> $MOO_LOG_PATH 2>&1

		mkdir -v "${ARCHLIVE}archlive/releng/work" >> $MOO_LOG_PATH 2>&1
		
		## create customize_root_image.sh
		cp -v ${MOO_TOOLS_PATH}create_iso/customize_root_image.sh ${ARCHLIVE}archlive/releng/root-image/root/customize_root_image.sh >> $MOO_LOG_PATH 2>&1
		
		cp -v ${MOO_TOOLS_PATH}misc/pacman.conf ${ARCHLIVE}archlive/releng/work/pacman.conf >> $MOO_LOG_PATH 2>&1
		
		## create pacman.conf for livecd
		cp -v ${MOO_TOOLS_PATH}misc/pacman.conf ${ARCHLIVE}archlive/releng/work/pacman.conf >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/pacman.conf ${ARCHLIVE}archlive/releng/root-image/etc/pacman.conf >> $MOO_LOG_PATH 2>&1
		
		## create pacman.conf for livecd specific to architecture
		cp -v ${MOO_TOOLS_PATH}misc/pacman-x86_64.conf ${ARCHLIVE}archlive/releng/root-image/etc/pacman-x86_64.conf >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/pacman-i686.conf ${ARCHLIVE}archlive/releng/root-image/etc/pacman-i686.conf >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/pacman-x86_64.conf ${ARCHLIVE}archlive/releng/work/pacman-x86_64.conf >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}misc/pacman-i686.conf ${ARCHLIVE}archlive/releng/work/pacman-i686.conf >> $MOO_LOG_PATH 2>&1

		cp -v ${MOO_TOOLS_PATH}packages.both ${ARCHLIVE}archlive/releng/packages.both >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}packages.extra ${ARCHLIVE}archlive/releng/packages.extra >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}packages-server.both ${ARCHLIVE}archlive/releng/packages-server.both >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}packages.i686 ${ARCHLIVE}archlive/releng/packages.i686 >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_TOOLS_PATH}packages.x86_64 ${ARCHLIVE}archlive/releng/packages.x86_64 >> $MOO_LOG_PATH 2>&1

		## copy over boot splash screen and mooOS branding
		cp -v ${ARCHLIVE}archlive/releng/syslinux/splash.png ${ARCHLIVE}archlive/releng/root-image/etc/grub.d/splash.png >> $MOO_LOG_PATH 2>&1
		convert ${ARCHLIVE}archlive/releng/root-image/etc/grub.d/splash.png ${ARCHLIVE}archlive/releng/root-image/etc/grub.d/splash.jpg >> $MOO_LOG_PATH 2>&1
	fi
		notify-send "Files copied!" -i "$MOO_ICON"
		moo_log end "Create build env"
}

create_mooos_repos() {
	$DIALOG --clear --backtitle "$upper_title" --title "mooOS repos" --yesno "Create and cleanup mooOS repos?" 10 30
	if [ $? = 0 ] ; then
		moo_log start "Create mooOS repos"
		echo "${bldgreen}Recreating repos now...${txtrst}" >> $MOO_LOG_PATH 2>&1
		## remove existing repos
		if [ -f "${ABS_BASE_DIR}mooOS-pkgs-32/mooOS.db.tar.gz" ]; then
			rm -v ${ABS_BASE_DIR}mooOS-pkgs-32/mooOS.db.tar.gz >> $MOO_LOG_PATH 2>&1
			rm -v ${ABS_BASE_DIR}mooOS-pkgs-64/mooOS.db.tar.gz >> $MOO_LOG_PATH 2>&1
		fi
		rm -v ${ABS_BASE_DIR}mooOS-pkgs-32/moo.db.tar.gz >> $MOO_LOG_PATH 2>&1
		rm -v ${ABS_BASE_DIR}mooOS-pkgs-64/moo.db.tar.gz >> $MOO_LOG_PATH 2>&1

		## hackity hack hack - clean up old git package caches
		arches="32 64"
		for mm in $arches
		do
			cd ${MOO_HOME}abs/mooOS-pkgs-$mm/
			mv -v $(ls | grep "efl-git-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "efl-git-debug-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "elementary-git-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "elementary-git-debug-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "elementary_test-git-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "elementary_test-git-debug-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "enlightenment17-git-0" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "enlightenment17-git-debug" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "evas_generic_loaders-git-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "evas_generic_loaders-git-debug-1" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "pulseaudio-mixer-cli-git" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "pyradio-git" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "sqlmap-git" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "terminology-git-0" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "terminology-git-debug-0" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "urxvt-font-size-git" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			mv -v $(ls | grep "youtube-viewer-git" | sort -r | head -2) ${MOO_HOME}abs/staging_$mm/ >> $MOO_LOG_PATH 2>&1
			rm -v ${MOO_HOME}abs/mooOS-pkgs-$mm/*-git* >> $MOO_LOG_PATH 2>&1
			mv -v ${MOO_HOME}abs/staging_$mm/* ${MOO_HOME}abs/mooOS-pkgs-$mm/ >> $MOO_LOG_PATH 2>&1
			cd "$PWD"
		done

		rm -vf ${MOO_HOME}abs/i686/*-git* >> $MOO_LOG_PATH 2>&1
		rm -vf ${MOO_HOME}abs/x86_64/*-git* >> $MOO_LOG_PATH 2>&1

		## make RMS happy :D
		## unzip-libre unar spectrwm-libre sdl-libre rp-pppoe-libre p7zip-libre openexr-libre mplayer-libre mozilla-searchplugins mencoder-libre mcomix-libre mc-libre lirc-libre-utils kdeutils-ark-libre kdelibs-libre kdebase-runtime-libre iceweasel-libre gstreamer0.10-bad-libre-plugins gstreamer0.10-bad-libre gst-plugins-bad-libre ghostscript-libre cpupower-libre cdrkit-libre bitlbee-libre-nonprism audio-convert-libre 

		rm -vf ${ABS_BASE_DIR}mooOS-pkgs-*/*-libre-* >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/i686/*-libre-*-i686* ${ABS_BASE_DIR}mooOS-pkgs-32/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/x86_64/*-libre-*-x86_64* ${ABS_BASE_DIR}mooOS-pkgs-64/ >> $MOO_LOG_PATH 2>&1

		rm -vf ${ABS_BASE_DIR}mooOS-pkgs-*/*-libre-*any* >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/i686/*-libre-*-any* ${ABS_BASE_DIR}mooOS-pkgs-32/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/x86_64/*-libre-*-any* ${ABS_BASE_DIR}mooOS-pkgs-64/ >> $MOO_LOG_PATH 2>&1

		rm -vf ${ABS_BASE_DIR}mooOS-pkgs-*/unar-* >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/i686/unar-*-i686* ${ABS_BASE_DIR}mooOS-pkgs-32/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/x86_64/unar-*-x86_64* ${ABS_BASE_DIR}mooOS-pkgs-64/ >> $MOO_LOG_PATH 2>&1

		rm -vf ${ABS_BASE_DIR}mooOS-pkgs-*/opencollada-* >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/i686/opencollada-*-i686* ${ABS_BASE_DIR}mooOS-pkgs-32/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/x86_64/opencollada-*-x86_64* ${ABS_BASE_DIR}mooOS-pkgs-64/ >> $MOO_LOG_PATH 2>&1

		rm -vf ${ABS_BASE_DIR}mooOS-pkgs-*/mozilla-searchplugins-* >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/i686/mozilla-searchplugins-*-any* ${ABS_BASE_DIR}mooOS-pkgs-32/ >> $MOO_LOG_PATH 2>&1
		cp -v ${MOO_HOME}abs/x86_64/mozilla-searchplugins-*-any* ${ABS_BASE_DIR}mooOS-pkgs-64/ >> $MOO_LOG_PATH 2>&1

		# rm -vf ${ABS_BASE_DIR}mooOS-pkgs-*/rasqal-* >> $MOO_LOG_PATH 2>&1
		# cp -v ${MOO_HOME}abs/i686/rasqal-*-i686* ${ABS_BASE_DIR}mooOS-pkgs-32/ >> $MOO_LOG_PATH 2>&1
		# cp -v ${MOO_HOME}abs/x86_64/rasqal-*-x86_64* ${ABS_BASE_DIR}mooOS-pkgs-64/ >> $MOO_LOG_PATH 2>&1

		## create repo databases
		echo "${bldmagenta}Re-creating i686 repository${txtrst}" >> $MOO_LOG_PATH 2>&1
		repo-add -k $GPGKEY ${ABS_BASE_DIR}mooOS-pkgs-32/moo.db.tar.gz ${ABS_BASE_DIR}mooOS-pkgs-32/*.pkg.tar.xz >> $MOO_LOG_PATH 2>&1
		echo "${bldmagenta}Re-creating x86_64 repository${txtrst}" >> $MOO_LOG_PATH 2>&1
		repo-add -k $GPGKEY ${ABS_BASE_DIR}mooOS-pkgs-64/moo.db.tar.gz ${ABS_BASE_DIR}mooOS-pkgs-64/*.pkg.tar.xz >> $MOO_LOG_PATH 2>&1

		## format log a little
		#echo $(date -d "today" +"%Y%m%d%H%M") >> $REPO_LOG_TEMP
		#sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" $REPO_LOG_TEMP >> $MOO_LOG

		notify-send "Repos created!" -i "$MOO_ICON"

		## clean up stable repos
		## re-create repos local and remoteed 
		echo "================syncing to local repos===================" >> $MOO_LOG_PATH 2>&1
		rsync -avzrcpPh --delete --stats ${REPO_BASE_DIR}/i686/ ${ABS_BASE_DIR}mooOS-pkgs-32-out-of-date >> $MOO_LOG_PATH 2>&1
		rsync -avzrcpPh --delete --stats ${REPO_BASE_DIR}/x86_64/ ${ABS_BASE_DIR}mooOS-pkgs-64-out-of-date >> $MOO_LOG_PATH 2>&1
		rsync -avzrcpPh --delete --stats ${ABS_BASE_DIR}mooOS-pkgs-32/ ${REPO_BASE_DIR}/i686 >> $MOO_LOG_PATH 2>&1
		rsync -avzrcpPh --delete --stats ${ABS_BASE_DIR}mooOS-pkgs-64/ ${REPO_BASE_DIR}/x86_64 >> $MOO_LOG_PATH 2>&1
		notify-send "Repos synced to local server!" -i "$MOO_ICON"
		moo_log end "Create mooOS repos"
	fi
}

sync_mooos_repos() {
	$DIALOG --clear --backtitle "$upper_title" --title "mooOS repos" --yesno "Sync remote mooOS repo?" 10 30
	if [ $? = 0 ] ; then
		moo_log start "Sync remote repos"
		## include login credentials:
		if [ -f "$REPO_CREDS" ] ; then
			echo "================syncing to remote repos===================" >> $MOO_LOG_PATH 2>&1
			. $REPO_CREDS

			## rsync using vars defined in credentials, e.g.:
			#for i in {1..5}
			for i in $(eval echo {1..$_remote_count})
			do
				port=$(eval echo $(echo '${'_remote$i[1]'}'))
				flags=$(eval echo $(echo '${'_remote$i[4]'}'))
				src=$(eval echo $(echo '${'_remote$i[2]'}'))
				dest=$(eval echo $(echo '${'_remote$i[3]'}'))
				torsocks rsync -avzrcPh $flags -e "torsocks ssh -p $port" $src $dest >> $MOO_LOG_PATH 2>&1 # -n, --dry-run perform a trial run with no changes made
			done
			notify-send "Repos synced to remote server!" -i "$MOO_ICON"
		fi
		moo_log end "Sync remote repos"
	fi
}

sync_remote() {
	## sync .isos to local directory and remote server
	for mooos in ${ISO_ARCH}
	do
		rsync_iso_remote $mooos
	done
}

build_moo() {
		## change to build directory and build iso
		for moo in ${ISO_ARCH}
		do
			$DIALOG --clear --backtitle "$upper_title" --title "mooOS" --yesno "Do you wish to make $moo iso?" 10 30
			if [ $? = 0 ] ; then
				moo_log start "build mooOS"
				echo "${bldcyan}Building $moo iso now...${txtrst}" >> $MOO_LOG_PATH 2>&1
				 ${MOO_TOOLS_PATH}create_iso/build.sh -v -a "$moo" -o "$ISO_DIR" -w "$WORK_DIR" -N "$ISO_NAME" -V "$ISO_VERSION" -L "$ISO_LABEL" >> $MOO_LOG_PATH 2>&1
				moo_log end "build mooOS"
			fi

			$DIALOG --clear --backtitle "$upper_title" --title "Build complete" --msgbox "$moo iso build complete" 20 70
			umount_work_env $moo
		done
}

moo_version() {
	$DIALOG --clear --backtitle "$upper_title" --title "mooOS version" --yesno "Increase moo version number? Current: $MOO_VERSION" 10 30
	if [ $? = 0 ] ; then
		moo_log start "mooOS version"
		MOO_NEW_VERSION=$(( $(echo $MOO_VERSION) + 1 ))
		sudo sed -i "s/MOO_VERSION=$MOO_VERSION/MOO_VERSION=$MOO_NEW_VERSION/g" /etc/moo.cfg
		echo "Old version: 0.$MOO_VERSION" >> $MOO_LOG_PATH 2>&1
		echo "Current version: 0.$MOO_NEW_VERSION" >> $MOO_LOG_PATH 2>&1
		moo_log end "mooOS version"
	fi
}



######### EXECUTE SCRIPT START #########
if [ $(id -u) -ne 0 ]; then ## as $USER

	## check repos are up
	check_repos "$REPO_LOCAL" 0  # 1/0 use torsocks
	check_repos "$REPO_REMOTE" 1 # 1/0 use torsocks

	mkmoo_menu

	notify-send "User script complete" -i "$MOO_ICON"

	## re-run script as root
 	sudo $0

else ## as $ROOT
	$DIALOG --clear --backtitle "$upper_title" --title "mooOS" --yesno "Have you ran this script as USER 1st? You wish to make iso?" 10 30
	if [ $? = 0 ] ; then
		## cleanup work/build env
		for m in ${ISO_ARCH}
		do
			umount_work_env $m
		done

		## check repos are up
		check_repos "$REPO_LOCAL" 0  # 1/0 use torsocks
		check_repos "$REPO_REMOTE" 1 # 1/0 use torsocks

		mkmoo_menu

		create_packages_list

		## create the build env
		create_build_env

		## change to build directory and build iso
		for moo in ${ISO_ARCH}
		do
			$DIALOG --clear --backtitle "$upper_title" --title "mooOS" --yesno "Do you wish to make $moo iso?" 10 30
			if [ $? = 0 ] ; then
				moo_log start "build mooOS"
				echo "${bldcyan}Building $moo iso now...${txtrst}" >> $MOO_LOG_PATH 2>&1
				 ${MOO_TOOLS_PATH}create_iso/build.sh -v -a "$moo" -o "$ISO_DIR" -w "$WORK_DIR" -N "$ISO_NAME" -V "$ISO_VERSION" -L "$ISO_LABEL" >> $MOO_LOG_PATH 2>&1
				moo_log end "build mooOS"
			fi

			$DIALOG --clear --backtitle "$upper_title" --title "Build complete" --msgbox "$moo iso build complete" 20 70
			umount_work_env $moo
		done
	fi
fi

# # utility execution
# while true
# do
#     mkmoo_menu
# done

# exit 0
